{"version":3,"file":"asciitable.js","sources":["../src/asciitable.js"],"sourcesContent":["/**\n * Create a ASCII table based on a bi-dimensional array of strings\n * @param  {Array}   m                                   bi-dimensional array of strings\n * @param  {Object}  [options]                           Options object\n * @param  {Object}  [options.row]                       Row options\n * @param  {String}  [options.row.paddingLeft=\"|\"]       String added before the first column\n * @param  {String}  [options.row.paddingRight=\"|\"]      String added after the last column\n * @param  {String}  [options.row.colSeparator=\"|\"]      String added between columns\n * @param  {String}  [options.row.lineBreak=\"\\n\"]        String used to break rows\n * @param  {Object}  [options.cell]                      Cell options\n * @param  {String}  [options.cell.paddingLeft=\" \"]      String added before the cell content\n * @param  {String}  [options.cell.paddingRight=\" \"]     String added after the cell content\n * @param  {Number}  [options.cell.defaultAlignDir=\"-1\"]  Define the default alignment when not specified (-1=left, 0=center, 1=right)\n * @param  {Object}  [options.hr]                        Horizontal Line options\n * @param  {String}  [options.hr.str=\"-\"]                String that will be repeated to make the Horizontal Line\n * @param  {String}  [options.hr.colSeparator=\"|\"]       String added between columns\n * @return {string}                                      The final ASCII table\n * @author github.com/victornpb\n * @date   2016-12-28\n */\nexport default function matrixToAsciiTable(m, options) {\n  options = defaultArgs({\n    row: {\n      paddingLeft: '|', // before first column\n      paddingRight: '|', // after last column\n      colSeparator: '|', // between each column\n      lineBreak: '\\n'\n    },\n    cell: {\n      paddingLeft: ' ',\n      paddingRight: ' ',\n      defaultAlignDir: -1 // left=-1 center=0 right=1\n    },\n    hr: {\n      str: '-',\n      colSeparator: '|'\n    }\n  }, options);\n\n  function repeatStr(width, str = ' ') {\n    const result = (width > 0) ? Array(Math.ceil(width / str.length) + 1).join(str) : '';\n    return result.length > width ? result.substr(0, width) : result;\n  }\n\n  function alignText(txt, width) {\n    function pad(txt, width, dir) {\n      const p = width - txt.length;\n      const pL = (dir > 0) ? p : (p / 2) << 0;\n      const pR = (dir < 0) ? p : pL + (p - (pL * 2));\n      return p > 0 ? (dir >= 0 ? Array(pL + 1).join(' ') : '') + txt + (dir <= 0 ? Array(pR + 1).join(' ') : '') : txt;\n    }\n    txt = `${txt}`; // toString\n    switch (txt.charAt(0)) {\n    case '<':\n      return pad(txt.substr(1), width, -1); // align left\n    case '^':\n      return pad(txt.substr(1), width, 0); // align center\n    case '>':\n      return pad(txt.substr(1), width, 1); // align right\n    default:\n      return pad(txt, width, options.cell.defaultAlignDir);\n    }\n  }\n\n  function calcColumnsWidth(matrix) {\n    // calculate columns width\n    const colsWidth = [];\n    for (let r = 0, rLen = matrix.length; r < rLen; r++) {\n      if (!matrix[r]) continue; // separator\n      for (let c = 0, cLen = matrix[r].length; c < cLen; c++) {\n        if (!colsWidth[c]) colsWidth[c] = 0;\n        colsWidth[c] = Math.max(colsWidth[c], (`${matrix[r][c]}`).length);\n      }\n    }\n    return colsWidth;\n  }\n\n  const paddingLength = options.cell.paddingLeft.length + options.cell.paddingRight.length;\n  const hrSeparator = repeatStr(options.row.colSeparator.length, options.hr.colSeparator || options.hr.str);\n  const colsWidth = calcColumnsWidth(m);\n\n  // create table\n  const table = [];\n  for (let r = 0, rLen = m.length; r < rLen; r++) {\n    const cols = [];\n\n    if (m[r]) { // create columns\n      for (let c = 0; c < colsWidth.length; c++) {\n        cols.push(options.cell.paddingLeft + alignText(m[r][c], colsWidth[c]) + options.cell.paddingRight);\n      }\n      table.push([options.row.paddingLeft, cols.join(options.row.colSeparator), options.row.paddingRight].join(''));\n    }\n    else { // create horizontal line\n      for (let c = 0; c < colsWidth.length; c++) {\n        cols.push(repeatStr(colsWidth[c] + paddingLength, options.hr.str));\n      }\n      table.push([options.row.paddingLeft, cols.join(hrSeparator), options.row.paddingRight].join(''));\n    }\n  }\n  return table.join(options.row.lineBreak);\n}\n\nfunction defaultArgs(defaults, options) {\n  function isObj(x) { return x !== null && typeof x === 'object'; }\n  function hasOwn(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }\n\n  if (isObj(options)) for (let prop in defaults) {\n    if (hasOwn(defaults, prop) && hasOwn(options, prop) && options[prop] !== undefined) {\n      if (isObj(defaults[prop])) defaultArgs(defaults[prop], options[prop]);\n      else defaults[prop] = options[prop];\n    }\n  }\n  return defaults;\n}\n"],"names":["defaultArgs","defaults","options","isObj","x","_typeof","hasOwn","obj","prop","Object","prototype","hasOwnProperty","call","undefined","m","repeatStr","width","str","result","Array","Math","ceil","length","join","substr","alignText","txt","pad","dir","p","pL","pR","charAt","cell","defaultAlignDir","paddingLength","row","paddingLeft","paddingRight","colSeparator","lineBreak","hr","hrSeparator","colsWidth","matrix","r","rLen","c","cLen","max","calcColumnsWidth","table","cols","push"],"mappings":"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"}