"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bookmark = exports.preview = exports.table = exports.divider = exports.addTabSpace = exports.image = exports.todo = exports.bullet = exports.callout = exports.quote = exports.heading3 = exports.heading2 = exports.heading1 = exports.codeBlock = exports.link = exports.underline = exports.strikethrough = exports.italic = exports.bold = exports.inlineCode = void 0;
const asciitable_js_1 = __importDefault(require("asciitable.js"));
const opengraph_1 = __importDefault(require("./opengraph"));
const inlineCode = (text) => {
    return `\`${text}\``;
};
exports.inlineCode = inlineCode;
const bold = (text) => {
    return `**${text}**`;
};
exports.bold = bold;
const italic = (text) => {
    return `_${text}_`;
};
exports.italic = italic;
const strikethrough = (text) => {
    return `~~${text}~~`;
};
exports.strikethrough = strikethrough;
const underline = (text) => {
    return `<u>${text}</u>`;
};
exports.underline = underline;
const link = (text, href) => {
    return `[${text}](${href})`;
};
exports.link = link;
const codeBlock = (text, language) => {
    return `\`\`\`${language}
${text}
\`\`\``;
};
exports.codeBlock = codeBlock;
const heading1 = (text) => {
    return `# ${text}`;
};
exports.heading1 = heading1;
const heading2 = (text) => {
    return `## ${text}`;
};
exports.heading2 = heading2;
const heading3 = (text) => {
    return `### ${text}`;
};
exports.heading3 = heading3;
const quote = (text) => {
    // the replace is done to handle multiple lines
    return `> ${text.replace(/\n/g, "  \n>")}`;
};
exports.quote = quote;
const callout = (text, icon) => {
    let emoji;
    if ((icon === null || icon === void 0 ? void 0 : icon.type) === 'emoji') {
        emoji = icon.emoji;
    }
    // the replace is done to handle multiple lines
    return `> ${emoji ? emoji + ' ' : ''}${text.replace(/\n/g, "  \n>")}`;
};
exports.callout = callout;
const bullet = (text) => {
    return `- ${text}`;
};
exports.bullet = bullet;
const todo = (text, checked) => {
    return checked ? `- [x] ${text}` : `- [ ] ${text}`;
};
exports.todo = todo;
const image = (alt, href) => {
    if (/^https?:\/\//.test(alt)) {
        // if alt is an external url, turn it into a "image link"
        return (0, exports.link)(`![image link](${href})`, alt);
    }
    return `![${alt}](${href})`;
};
exports.image = image;
const addTabSpace = (text, n = 0) => {
    const tab = "	";
    for (let i = 0; i < n; i++) {
        if (text.includes("\n")) {
            const multiLineText = text.split(/(?<=\n)/).join(tab);
            text = tab + multiLineText;
        }
        else
            text = tab + text;
    }
    return text;
};
exports.addTabSpace = addTabSpace;
const divider = () => {
    return "---";
};
exports.divider = divider;
const table = (cells) => {
    const matrix = [cells[0], null, ...cells.slice(1)];
    return (0, asciitable_js_1.default)(matrix);
};
exports.table = table;
const preview = async (url) => {
    var _a, _b;
    const data = await (0, opengraph_1.default)(url);
    const og = data.result;
    if (og) {
        const icon = ((_a = og.ogImage) === null || _a === void 0 ? void 0 : _a.url) ? `![favicon](${og.favicon}) ` : '';
        const preview = ((_b = og.ogImage) === null || _b === void 0 ? void 0 : _b.url) ? `![image](${og.ogImage.url}) ` : '';
        const title = og.ogSiteName || og.ogTitle;
        const description = og.ogDescription || '';
        const lines = [
            `[${icon}**${title}**](${url})`,
            description.replace(/\n/g, "  "),
            url
        ];
        return lines.filter(Boolean).map(line => `> ${line}`).join('  \n');
    }
    else {
        return `> [${url}](${url})`;
    }
};
exports.preview = preview;
const bookmark = async (url) => {
    var _a, _b;
    const data = await (0, opengraph_1.default)(url);
    const og = data.result;
    if (og) {
        const icon = ((_a = og.ogImage) === null || _a === void 0 ? void 0 : _a.url) ? `![favicon](${og.favicon}) ` : '';
        const preview = ((_b = og.ogImage) === null || _b === void 0 ? void 0 : _b.url) ? `![image](${og.ogImage.url}) ` : '';
        const title = og.ogTitle;
        const description = og.ogDescription || '';
        const lines = [
            `[${preview}**${title}**](${url})`,
            description.replace(/\n/g, "  "),
            url
        ];
        return lines.filter(Boolean).map(line => `> ${line}`).join('  \n');
    }
    else {
        return `> [${url}](${url})`;
    }
};
exports.bookmark = bookmark;
//# sourceMappingURL=md.js.map